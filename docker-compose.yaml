services:  
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    hostname: home
    ports:
      - 3000:3000
    volumes:
      - ./homepage_config:/app/config:rw # Make sure your local config directory exists
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker socket
    environment:
      - PUID=1000
      - PGID=1000
      # Unifi
      - HOMEPAGE_VAR_UNIFI_USERNAME=${HOMEPAGE_VAR_UNIFI_USERNAME}
      - HOMEPAGE_VAR_UNIFI_PASSWORD=${HOMEPAGE_VAR_UNIFI_PASSWORD}
      # Synology
      - HOMEPAGE_VAR_SYNOLOGY_USERNAME=${HOMEPAGE_VAR_SYNOLOGY_USERNAME}
      - HOMEPAGE_VAR_SYNOLOGY_PASSWORD=${HOMEPAGE_VAR_SYNOLOGY_PASSWORD}
      # Cloudflare
      - HOMEPAGE_VAR_CLOUDFLARE_ACCOUNTID=${HOMEPAGE_VAR_CLOUDFLARE_ACCOUNTID}
      - HOMEPAGE_VAR_CLOUDFLARE_APITOKEN=${HOMEPAGE_VAR_CLOUDFLARE_APITOKEN}
      - HOMEPAGE_VAR_CLOUDFLARE_TUNNELID=${HOMEPAGE_VAR_CLOUDFLARE_TUNNELID}
      # Proxmox
      - HOMEPAGE_VAR_PROXMOX_USERNAME=${HOMEPAGE_VAR_PROXMOX_USERNAME}
      - HOMEPAGE_VAR_PROXMOX_PASSWORD=${HOMEPAGE_VAR_PROXMOX_PASSWORD}
      # Authentik
      - HOMEPAGE_VAR_AUTHENTIK_API_TOKEN=${HOMEPAGE_VAR_AUTHENTIK_API_TOKEN}
      # Portainer
      - HOMEPAGE_VAR_PORTAINER_TOKEN=${HOMEPAGE_VAR_PORTAINER_TOKEN}
      # Grafana
      - HOMEPAGE_VAR_GRAFANA_USERNAME=${HOMEPAGE_VAR_GRAFANA_USERNAME}
      - HOMEPAGE_VAR_GRAFANA_PASSWORD=${HOMEPAGE_VAR_GRAFANA_PASSWORD}
    env_file:
      - .env
    restart: unless-stopped

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    ports:
      - 9100:9100
    command:
      - '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    restart: unless-stopped